# -*- coding: utf-8 -*-
"""cap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DYAqVoCKgAB7VNi3DTeG91kN2GVTEHEe

Data import & cleaning
"""

# Connecting Google Drive data files to Google Colab Notebook.
# Load the Google Drive helper and mount the drive.
from google.colab import drive

# This will prompt for authorization. Click the link and provide the required information.

drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# %matplotlib inline
df = pd.read_csv('/content/drive/My Drive/cs668/BankChurners.csv')
df.head()

print(df.columns)

columns_to_drop = ['CLIENTNUM', 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1',
          'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2']
df.drop(columns=columns_to_drop, inplace=True)

print(df[df.isnull().T.any().T])

df.head()

df.info()

df_clean = df.replace('Unknown', np.nan)

print(df_clean[df_clean.isnull().T.any().T])

df_clean.dropna(inplace=True)

df_clean.info()

df = df_clean

df.head()

"""Data visualization"""

customer = df['Attrition_Flag'].value_counts()
customer

customer.plot(kind='pie',
              title='Cutomer',
              figsize=(5, 5),
              explode=[0, 0.15],
              labels=['Existing', 'Attrited'],
              autopct='%2.2f%%',
              shadow=True,
              startangle=90,
              fontsize=16).set_ylabel('')

age = df['Customer_Age']
age.plot(kind='hist',
         bins=20,
         title='Age',
         alpha=0.6)

gender = df['Gender'].value_counts()
gender

gender.plot(kind='pie',
            title='Gender',
            figsize=(5, 5),
            explode=[0, 0.1],
            labels=['Female', 'Male'],
            autopct='%2.2f%%',
            shadow=True,
            startangle=90,
            fontsize=16).set_ylabel('')

education = df['Education_Level'].value_counts()
education

education.plot(kind='pie',
               title='Education',
               figsize=(8, 8),
               explode=[0.05, 0.05, 0.05, 0.05, 0.1, 0.1],
               labels=['Graduate', 'High School', 'Uneducated', 'College', 'Post-Graduate', 'Doctorate'],
               autopct='%2.2f%%',
               shadow=True,
               startangle=90,
               fontsize=16).set_ylabel('')

marriage = df['Marital_Status'].value_counts()
marriage

marriage.plot(kind='pie',
              title='Marriage',
              figsize=(5, 5),
              explode=[0.05, 0.05, 0.1],
              labels=['Married', 'Single', 'Divorced'],
              autopct='%2.2f%%',
              shadow=True,
              startangle=90,
              fontsize=16).set_ylabel('')

income = df['Income_Category'].value_counts()
income

income.plot(kind='pie',
               title='Income',
               figsize=(5, 5),
               explode=[0.05, 0.1, 0.1, 0.1, 0.1],
               labels=['< $40K', '$40K - 60K', '$80K - 120K', '$60K - 80K', '> $120K'],
               autopct='%2.2f%%',
               shadow=True,
               startangle=90,
               fontsize=16).set_ylabel('')

card = df['Card_Category'].value_counts()
card

card.plot(kind='pie',
          figsize=(8, 8),
          explode=[0, 0.1, 0.2, 0.3],
          labels=['Blue', 'Silver', 'Gold', 'Platinum'],
          autopct='%2.2f%%',
          shadow=True,
          startangle=90,
          fontsize=16).set_ylabel('card')

"""Data process"""

df.loc[df['Attrition_Flag'] == 'Existing Customer', 'Attrition_Flag'] = 1
df.loc[df['Attrition_Flag'] == 'Attrited Customer', 'Attrition_Flag'] = 0

g = pd.get_dummies(df.Gender)
e = pd.get_dummies(df.Education_Level)
m = pd.get_dummies(df.Marital_Status)
i = pd.get_dummies(df.Income_Category)
c = pd.get_dummies(df.Card_Category)

newdata = pd.concat([df, g, e, m, i, c], axis = 1)
newdata.drop(columns=['Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category'], axis = 1, inplace = True)

newdata['Attrition_Flag'] = pd.to_numeric(newdata['Attrition_Flag'])

newdata.head()

newdata.info()

from sklearn.model_selection import train_test_split
train_X,test_X,train_y,test_y = train_test_split(newdata[newdata.columns[1:]],newdata[newdata.columns[0]],test_size=0.3,random_state=214)

print(train_X.shape)
print(test_X.shape)

train_X.head()

train_y.head()

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(random_state=214)
from xgboost import XGBClassifier
xgb = XGBClassifier()
from sklearn.model_selection import cross_val_score

cross_val_score(rf,train_X,train_y,cv=10).mean()

cross_val_score(xgb,train_X,train_y,cv=10).mean()

rf.fit(train_X,train_y)
rf_y_predict=rf.predict(test_X)
rf.score(test_X,test_y)

xgb.fit(train_X,train_y)
xgb_y_predict=xgb.predict(test_X)
xgb.score(test_X,test_y)

from sklearn.metrics import classification_report
print('The accuracy of random forest model:')
print(classification_report(test_y, rf_y_predict, target_names=['Attrited Customer', 'Existing Customer']))
print('The accuracy of XGBoost model:')
print(classification_report(test_y, xgb_y_predict, target_names=['Attrited Customer', 'Existing Customer']))

"""smote"""

from collections import Counter
print(Counter(train_y))

from imblearn.over_sampling import SMOTE
smo = SMOTE(random_state=214)
X_smo, y_smo = smo.fit_sample(train_X,train_y)

print(X_smo.shape)
print(Counter(y_smo))

cross_val_score(rf,X_smo,y_smo,cv=10).mean()

cross_val_score(xgb,X_smo,y_smo,cv=10).mean()

rf.fit(X_smo,y_smo)
rf_y_predict_smo=rf.predict(test_X)
rf.score(test_X,test_y)

xgb.fit(X_smo,y_smo)
xgb_y_predict_smo=xgb.predict(test_X.values, validate_features=False)
xgb.score(test_X.values,test_y)

print('The accuracy of random forest model:')
print(classification_report(test_y, rf_y_predict_smo, target_names=['Attrited Customer', 'Existing Customer']))
print('The accuracy of XGBoost model:')
print(classification_report(test_y, xgb_y_predict_smo, target_names=['Attrited Customer', 'Existing Customer']))

from sklearn.metrics import roc_curve, auc
from sklearn.metrics import roc_auc_score

y_score_rf = rf.fit(train_X,train_y).predict_proba(test_X)
print(roc_auc_score(test_y, y_score_rf[:,1]))

y_score_xgb = xgb.fit(train_X,train_y).predict_proba(test_X)
print(roc_auc_score(test_y, y_score_xgb[:,1]))

y_score_rf_smo = rf.fit(X_smo,y_smo).predict_proba(test_X)
print(roc_auc_score(test_y, y_score_rf_smo[:,1]))

y_score_xgb_smo = xgb.fit(X_smo,y_smo).predict_proba(test_X.values)
print(roc_auc_score(test_y, y_score_xgb_smo[:,1]))

from sklearn.metrics import confusion_matrix
import plotly.figure_factory as ff
z = confusion_matrix(test_y,rf_y_predict)
fig = ff.create_annotated_heatmap(z, x=['Predicted Churn','Predicted Not Churn'], y=['Churn','Not Churn'], colorscale='Fall',xgap=3,ygap=3)
fig['data'][0]['showscale'] = True
fig.update_layout(title='Prediction On Original Data With Random Forest Model Confusion Matrix')
fig.show()

z = confusion_matrix(test_y,xgb_y_predict)
fig = ff.create_annotated_heatmap(z, x=['Predicted Churn','Predicted Not Churn'], y=['Churn','Not Churn'], colorscale='Fall',xgap=3,ygap=3)
fig['data'][0]['showscale'] = True
fig.update_layout(title='Prediction On Original Data With Random Forest Model Confusion Matrix')
fig.show()

z = confusion_matrix(test_y,rf_y_predict_smo)
fig = ff.create_annotated_heatmap(z, x=['Predicted Churn','Predicted Not Churn'], y=['Churn','Not Churn'], colorscale='Fall',xgap=3,ygap=3)
fig['data'][0]['showscale'] = True
fig.update_layout(title='Prediction On Original Data With Random Forest Model Confusion Matrix')
fig.show()

z = confusion_matrix(test_y,xgb_y_predict_smo)
fig = ff.create_annotated_heatmap(z, x=['Predicted Churn','Predicted Not Churn'], y=['Churn','Not Churn'], colorscale='Fall',xgap=3,ygap=3)
fig['data'][0]['showscale'] = True
fig.update_layout(title='Prediction On Original Data With Random Forest Model Confusion Matrix')
fig.show()